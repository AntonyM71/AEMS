"""Tests for autogenerated endpoints with HTTP tests."""
from unittest.mock import MagicMock

from fastapi.testclient import TestClient

from app.autogenEndpoints import crud_route_competition
from db.client import get_transaction_session
from main import app

# Create test client
client = TestClient(app)


# Basic route test (works)
def test_competition_route_exists():
    """Test that the competition route exists and has correct configuration."""
    assert crud_route_competition.prefix == "/competition"
    assert "competition" in crud_route_competition.tags
    assert crud_route_competition.routes  # Ensure routes are defined


# HTTP test with explicit mocking
def test_competition_http_get():
    """Test the GET /competition endpoint with mocked database."""
    # Create a mock DB session
    mock_db = MagicMock()

    # Mock the query result
    mock_competition = MagicMock()
    mock_competition.id = "test-id-123"
    mock_competition.name = "Test Competition"

    # Set up the query chain
    mock_query = mock_db.query.return_value
    mock_filter = mock_query.filter.return_value
    mock_all = mock_filter.all
    mock_all.return_value = [mock_competition]

    # Override the database dependency
    original_dependency = app.dependency_overrides.copy()
    app.dependency_overrides[get_transaction_session] = lambda: iter([mock_db])

    try:
        # Make the request
        response = client.get("/competition")

        # Verify DB was called
        mock_db.query.assert_called_once()

        # Check response
        assert response.status_code == 200
        data = response.json()
        assert "data" in data
        assert isinstance(data["data"], list)
        assert len(data["data"]) == 1
        assert data["data"][0]["id"] == "test-id-123"
        assert data["data"][0]["name"] == "Test Competition"

    finally:
        # Restore the original dependencies
        app.dependency_overrides = original_dependency


# HTTP test for one item
def test_competition_http_get_one():
    """Test the GET /competition/{id} endpoint with mocked database."""
    # Create a mock DB session
    mock_db = MagicMock()

    # Mock the query result
    mock_competition = MagicMock()
    mock_competition.id = "test-id-123"
    mock_competition.name = "Test Competition"

    # Set up the query chain
    mock_query = mock_db.query.return_value
    mock_filter = mock_query.filter.return_value
    mock_first = mock_filter.first
    mock_first.return_value = mock_competition

    # Override the database dependency
    original_dependency = app.dependency_overrides.copy()
    app.dependency_overrides[get_transaction_session] = lambda: iter([mock_db])

    try:
        # Make the request
        response = client.get("/competition/test-id-123")

        # Verify DB was called
        mock_db.query.assert_called_once()

        # Check response
        assert response.status_code == 200
        data = response.json()
        assert "data" in data
        assert data["data"]["id"] == "test-id-123"
        assert data["data"]["name"] == "Test Competition"

    finally:
        # Restore the original dependencies
        app.dependency_overrides = original_dependency
