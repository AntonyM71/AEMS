"""Tests for autogenerated HTTP endpoints using actual HTTP requests."""
import uuid

import pytest
from fastapi.testclient import TestClient
from sqlalchemy import create_engine, event
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool

from db.models import Base
from main import app

# Create TestClient
client = TestClient(app)


# Helper function to generate UUIDs
def generate_uuid():
    """Generate a UUID for testing."""
    return str(uuid.uuid4())


# Use in-memory SQLite for testing
@pytest.fixture(scope="function")
def test_db():
    """Create an in-memory database for testing."""
    # Create an in-memory SQLite database
    engine = create_engine(
        "sqlite:///:memory:",
        connect_args={"check_same_thread": False},
        poolclass=StaticPool,
    )

    # Add the UUID function to SQLite
    @event.listens_for(engine, "connect")
    def do_connect(dbapi_connection, connection_record):
        # Define gen_random_uuid function for SQLite
        dbapi_connection.create_function(
            "gen_random_uuid", 0, lambda: str(uuid.uuid4()))

    # Create all tables in the engine
    Base.metadata.create_all(engine)

    # Create a configured Session class
    TestingSessionLocal = sessionmaker(
        autocommit=False, autoflush=False, bind=engine)

    # Create a new session for each test
    db = TestingSessionLocal()
    try:
        yield db
    finally:
        db.close()
        # Drop all tables in the database
        Base.metadata.drop_all(bind=engine)


@pytest.fixture(scope="function")
def client_with_db(test_db):
    """Create a test client with database override."""
    # Override the get_transaction_session dependency
    def override_get_db():
        try:
            yield test_db
        finally:
            pass

    # Apply the override for all routes
    app.dependency_overrides = {}
    app.dependency_overrides["db.client.get_transaction_session"] = override_get_db

    yield client

    # Reset overrides after test
    app.dependency_overrides = {}


class TestCompetitionEndpoints:
    """Tests for competition API endpoints."""

    def test_create_and_get_competition(self, client_with_db, test_db):
        """Test creating and then retrieving a competition."""
        # Test data
        test_name = f"Test Competition {generate_uuid()}"

        # Create a competition
        create_response = client_with_db.post(
            "/competition/many",
            json={
                "insert": [
                    {"name": test_name}
                ]
            }
        )

        # Check creation response
        assert create_response.status_code == 201
        create_data = create_response.json()
        assert "data" in create_data
        assert "insert" in create_data["data"]
        assert len(create_data["data"]["insert"]) == 1
        assert create_data["data"]["insert"][0]["name"] == test_name

        # Get the ID of the created competition
        competition_id = create_data["data"]["insert"][0]["id"]

        # Now retrieve the created competition
        get_response = client_with_db.get("/competition")

        # Check retrieval response
        assert get_response.status_code == 200
        get_data = get_response.json()
        assert "data" in get_data

        # Find our competition in the results
        found = False
        for comp in get_data["data"]:
            if comp["id"] == competition_id and comp["name"] == test_name:
                found = True
                break

        assert found, "Created competition not found in GET response"


class TestEventEndpoints:
    """Tests for event API endpoints."""

    @pytest.fixture
    def competition(self, client_with_db, test_db):
        """Create a competition for testing."""
        response = client_with_db.post(
            "/competition/many",
            json={
                "insert": [
                    {"name": f"Test Competition for Events {generate_uuid()}"}
                ]
            }
        )
        return response.json()["data"]["insert"][0]

    def test_create_and_get_event(self, client_with_db, test_db, competition):
        """Test creating and then retrieving an event."""
        # Test data
        test_name = f"Test Event {generate_uuid()}"
        competition_id = competition["id"]

        # Create an event
        create_response = client_with_db.post(
            "/event/many",
            json={
                "insert": [
                    {
                        "name": test_name,
                        "competition_id": competition_id
                    }
                ]
            }
        )

        # Check creation response
        assert create_response.status_code == 201
        create_data = create_response.json()
        assert "data" in create_data
        assert "insert" in create_data["data"]
        assert len(create_data["data"]["insert"]) == 1
        assert create_data["data"]["insert"][0]["name"] == test_name
        assert create_data["data"]["insert"][0]["competition_id"] == competition_id

        # Get the ID of the created event
        event_id = create_data["data"]["insert"][0]["id"]

        # Now retrieve the created event
        get_response = client_with_db.get("/event")

        # Check retrieval response
        assert get_response.status_code == 200
        get_data = get_response.json()
        assert "data" in get_data

        # Find our event in the results
        found = False
        for event in get_data["data"]:
            if event["id"] == event_id and event["name"] == test_name:
                found = True
                break

        assert found, "Created event not found in GET response"


class TestPhaseEndpoints:
    """Tests for phase API endpoints."""

    @pytest.fixture
    def competition(self, client_with_db, test_db):
        """Create a competition for testing."""
        response = client_with_db.post(
            "/competition/many",
            json={
                "insert": [
                    {"name": f"Test Competition for Phases {generate_uuid()}"}
                ]
            }
        )
        return response.json()["data"]["insert"][0]

    @pytest.fixture
    def event(self, client_with_db, test_db, competition):
        """Create an event for testing."""
        response = client_with_db.post(
            "/event/many",
            json={
                "insert": [
                    {
                        "name": f"Test Event for Phases {generate_uuid()}",
                        "competition_id": competition["id"]
                    }
                ]
            }
        )
        return response.json()["data"]["insert"][0]

    @pytest.fixture
    def scoresheet(self, client_with_db, test_db):
        """Create a scoresheet for testing."""
        response = client_with_db.post(
            "/scoresheet/many",
            json={
                "insert": [
                    {"name": f"Test Scoresheet {generate_uuid()}"}
                ]
            }
        )
        return response.json()["data"]["insert"][0]

    def test_create_and_get_phase(self, client_with_db, test_db, event, scoresheet):
        """Test creating and then retrieving a phase."""
        # Test data
        test_name = f"Test Phase {generate_uuid()}"
        event_id = event["id"]
        scoresheet_id = scoresheet["id"]

        # Create a phase
        create_response = client_with_db.post(
            "/phase/many",
            json={
                "insert": [
                    {
                        "name": test_name,
                        "event_id": event_id,
                        "number_of_runs": 3,
                        "number_of_runs_for_score": 2,
                        "number_of_judges": 3,
                        "scoresheet": scoresheet_id
                    }
                ]
            }
        )

        # Check creation response
        assert create_response.status_code == 201
        create_data = create_response.json()
        assert "data" in create_data
        assert "insert" in create_data["data"]
        assert len(create_data["data"]["insert"]) == 1
        assert create_data["data"]["insert"][0]["name"] == test_name
        assert create_data["data"]["insert"][0]["event_id"] == event_id

        # Get the ID of the created phase
        phase_id = create_data["data"]["insert"][0]["id"]

        # Now retrieve the created phase
        get_response = client_with_db.get(f"/phase/{phase_id}")

        # Check retrieval response
        assert get_response.status_code == 200
        get_data = get_response.json()
        assert "data" in get_data
        assert get_data["data"]["id"] == phase_id
        assert get_data["data"]["name"] == test_name
        assert get_data["data"]["event_id"] == event_id

    def test_update_phase(self, client_with_db, test_db, event, scoresheet):
        """Test updating a phase."""
        # First create a phase
        test_name = f"Test Phase for Update {generate_uuid()}"
        create_response = client_with_db.post(
            "/phase/many",
            json={
                "insert": [
                    {
                        "name": test_name,
                        "event_id": event["id"],
                        "number_of_runs": 3,
                        "number_of_runs_for_score": 2,
                        "number_of_judges": 3,
                        "scoresheet": scoresheet["id"]
                    }
                ]
            }
        )

        phase_id = create_response.json()["data"]["insert"][0]["id"]

        # Now update the phase
        updated_name = f"Updated Phase Name {generate_uuid()}"
        update_response = client_with_db.patch(
            f"/phase/{phase_id}",
            json={"name": updated_name}
        )

        # Check update response
        assert update_response.status_code == 200

        # Verify the update worked
        get_response = client_with_db.get(f"/phase/{phase_id}")
        assert get_response.status_code == 200
        get_data = get_response.json()
        assert get_data["data"]["name"] == updated_name


class TestHeatEndpoints:
    """Tests for heat API endpoints."""

    @pytest.fixture
    def competition(self, client_with_db, test_db):
        """Create a competition for testing."""
        response = client_with_db.post(
            "/competition/many",
            json={
                "insert": [
                    {"name": f"Test Competition for Heats {generate_uuid()}"}
                ]
            }
        )
        return response.json()["data"]["insert"][0]

    def test_create_and_get_heat(self, client_with_db, test_db, competition):
        """Test creating and then retrieving a heat."""
        # Test data
        test_name = f"Test Heat {generate_uuid()}"
        competition_id = competition["id"]

        # Create a heat
        create_response = client_with_db.post(
            "/heat/many",
            json={
                "insert": [
                    {
                        "name": test_name,
                        "competition_id": competition_id
                    }
                ]
            }
        )

        # Check creation response
        assert create_response.status_code == 201
        create_data = create_response.json()
        assert "data" in create_data
        assert "insert" in create_data["data"]
        assert len(create_data["data"]["insert"]) == 1
        assert create_data["data"]["insert"][0]["name"] == test_name
        assert create_data["data"]["insert"][0]["competition_id"] == competition_id

        # Get the ID of the created heat
        heat_id = create_data["data"]["insert"][0]["id"]

        # Now retrieve the created heat
        get_response = client_with_db.get(f"/heat/{heat_id}")

        # Check retrieval response
        assert get_response.status_code == 200
        get_data = get_response.json()
        assert "data" in get_data
        assert get_data["data"]["id"] == heat_id
        assert get_data["data"]["name"] == test_name
        assert get_data["data"]["competition_id"] == competition_id


class TestAthleteEndpoints:
    """Tests for athlete API endpoints."""

    def test_create_and_update_athlete(self, client_with_db, test_db):
        """Test creating and updating an athlete."""
        # Test data
        first_name = f"John {generate_uuid()}"
        last_name = f"Doe {generate_uuid()}"
        bib = f"A{generate_uuid()[:6]}"

        # Create an athlete
        create_response = client_with_db.post(
            "/athlete/many",
            json={
                "insert": [
                    {
                        "first_name": first_name,
                        "last_name": last_name,
                        "bib": bib,
                        "affiliation": "Test Team"
                    }
                ]
            }
        )

        # Check creation response
        assert create_response.status_code == 201
        create_data = create_response.json()
        assert "data" in create_data
        assert "insert" in create_data["data"]
        assert len(create_data["data"]["insert"]) == 1
        assert create_data["data"]["insert"][0]["first_name"] == first_name
        assert create_data["data"]["insert"][0]["last_name"] == last_name

        # Get the ID of the created athlete
        athlete_id = create_data["data"]["insert"][0]["id"]

        # Now update the athlete
        updated_first_name = f"Jane {generate_uuid()}"
        update_response = client_with_db.patch(
            f"/athlete/{athlete_id}",
            json={"first_name": updated_first_name}
        )

        # Check update response
        assert update_response.status_code == 200


class TestScoresheetEndpoints:
    """Tests for scoresheet API endpoints."""

    def test_create_and_get_scoresheet(self, client_with_db, test_db):
        """Test creating and retrieving a scoresheet."""
        # Test data
        test_name = f"Test Scoresheet {generate_uuid()}"

        # Create a scoresheet
        create_response = client_with_db.post(
            "/scoresheet/many",
            json={
                "insert": [
                    {"name": test_name}
                ]
            }
        )

        # Check creation response
        assert create_response.status_code == 201
        create_data = create_response.json()
        assert "data" in create_data
        assert "insert" in create_data["data"]
        assert len(create_data["data"]["insert"]) == 1
        assert create_data["data"]["insert"][0]["name"] == test_name

        # Get the ID of the created scoresheet
        scoresheet_id = create_data["data"]["insert"][0]["id"]

        # Now retrieve all scoresheets
        get_response = client_with_db.get("/scoresheet")

        # Check retrieval response
        assert get_response.status_code == 200
        get_data = get_response.json()
        assert "data" in get_data

        # Find our scoresheet in the results
        found = False
        for sheet in get_data["data"]:
            if sheet["id"] == scoresheet_id and sheet["name"] == test_name:
                found = True
                break

        assert found, "Created scoresheet not found in GET response"
