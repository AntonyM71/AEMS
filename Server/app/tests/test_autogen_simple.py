"""Simple test for autogenerated endpoints."""
import uuid

import pytest
from fastapi.testclient import TestClient
from sqlalchemy import Column, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from db.client import get_transaction_session
from main import app

# Create a test client
client = TestClient(app)

# Create a test database
TestBase = declarative_base()


# Define a test model for Competition
class TestCompetition(TestBase):
    """Test model for Competition."""
    __tablename__ = "competition"
    id = Column(String(36), primary_key=True, nullable=False)
    name = Column(String, nullable=False)


# Setup fixture for the test database
@pytest.fixture
def test_db():
    """Create a test database."""
    # Create an in-memory SQLite database
    engine = create_engine("sqlite:///:memory:")

    # Create the tables
    TestBase.metadata.create_all(engine)

    # Create a session
    TestSession = sessionmaker(bind=engine)
    session = TestSession()

    # Generate a test UUID for our competition
    test_id = str(uuid.uuid4())

    # Create a test competition directly in the database
    test_competition = TestCompetition(id=test_id, name="Test Competition")
    session.add(test_competition)
    session.commit()

    try:
        # Override the database session dependency with our test session
        def override_get_db():
            try:
                yield session
            finally:
                pass

        app.dependency_overrides[get_transaction_session] = override_get_db

        yield session, test_id
    finally:
        # Reset the dependency override
        app.dependency_overrides = {}
        session.close()
        TestBase.metadata.drop_all(engine)


# Test the GET /competition endpoint
def test_get_competition(test_db):
    """Test getting a competition."""
    session, test_id = test_db

    # Make the GET request
    response = client.get("/competition")

    # Print the response for debugging
    print(f"Response status: {response.status_code}")
    print(f"Response data: {response.json()}")

    # Check that it returns a 200 OK status code
    assert response.status_code == 200

    # Check that the response contains our test competition
    data = response.json()
    assert "data" in data
    assert len(data["data"]) >= 1  # There should be at least one competition

    # Find our test competition
    found = False
    for comp in data["data"]:
        if comp["id"] == test_id:
            found = True
            break

    assert found, f"Test competition with ID {test_id} not found in response"


# Test the GET /competition/{id} endpoint
def test_get_competition_by_id(test_db):
    """Test getting a competition by ID."""
    session, test_id = test_db

    # Make the GET request with the test ID
    response = client.get(f"/competition/{test_id}")

    # Check that it returns a 200 OK status code
    assert response.status_code == 200

    # Check that the response contains our test competition
    data = response.json()
    assert "data" in data
    assert data["data"]["id"] == test_id
    assert data["data"]["name"] == "Test Competition"
