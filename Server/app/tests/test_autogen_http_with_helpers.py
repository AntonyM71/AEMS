"""Tests for autogenerated HTTP endpoints using actual HTTP requests and test models."""
import uuid

import pytest
from fastapi.testclient import TestClient

from app.tests.test_model_helpers import create_test_db_session, create_test_models
from main import app

# Create test models
test_models = create_test_models()

# Create TestClient
client = TestClient(app)


# Helper function to generate UUIDs
def generate_uuid():
    """Generate a UUID for testing."""
    return str(uuid.uuid4())


@pytest.fixture(scope="function")
def test_client_with_db():
    """Create a test client with test database."""
    # Create a test database session
    with create_test_db_session() as db:
        # Override the get_db dependency
        def override_get_db():
            try:
                yield db
            finally:
                pass

        # Apply the dependency override
        app.dependency_overrides = {}
        # Use the correct dependency path from db/client.py
        from db.client import get_transaction_session
        app.dependency_overrides[get_transaction_session] = override_get_db

        # Use the client with the overridden database
        yield client

        # Reset the dependency override
        app.dependency_overrides = {}


class TestCompetitionEndpoints:
    """Tests for competition API endpoints using test models."""

    def test_create_and_get_competition(self, test_client_with_db):
        """Test creating and retrieving a competition."""
        # Test data
        test_name = f"Test Competition {generate_uuid()}"

        # Create a competition
        create_response = test_client_with_db.post(
            "/competition/many",
            json={
                "insert": [
                    {"name": test_name}
                ]
            }
        )

        # Check status code
        assert create_response.status_code == 201, f"Failed to create competition: {create_response.text}"

        # Check response data
        create_data = create_response.json()
        assert "data" in create_data
        assert "insert" in create_data["data"]
        assert len(create_data["data"]["insert"]) == 1
        assert create_data["data"]["insert"][0]["name"] == test_name

        # Get the ID
        competition_id = create_data["data"]["insert"][0]["id"]

        # Retrieve all competitions
        get_response = test_client_with_db.get("/competition")
        assert get_response.status_code == 200

        # Check that our created competition is in the response
        get_data = get_response.json()
        assert "data" in get_data

        # Find the created competition
        found = False
        for comp in get_data["data"]:
            if comp["id"] == competition_id and comp["name"] == test_name:
                found = True
                break

        assert found, "Created competition not found in GET response"


class TestEventEndpoints:
    """Tests for event API endpoints using test models."""

    @pytest.fixture
    def competition(self, test_client_with_db):
        """Create a competition for testing."""
        response = test_client_with_db.post(
            "/competition/many",
            json={
                "insert": [
                    {"name": f"Test Competition for Events {generate_uuid()}"}
                ]
            }
        )
        return response.json()["data"]["insert"][0]

    def test_create_and_get_event(self, test_client_with_db, competition):
        """Test creating and retrieving an event."""
        # Test data
        test_name = f"Test Event {generate_uuid()}"
        competition_id = competition["id"]

        # Create an event
        create_response = test_client_with_db.post(
            "/event/many",
            json={
                "insert": [
                    {
                        "name": test_name,
                        "competition_id": competition_id
                    }
                ]
            }
        )

        # Check status code
        assert create_response.status_code == 201, f"Failed to create event: {create_response.text}"

        # Check response data
        create_data = create_response.json()
        assert "data" in create_data
        assert "insert" in create_data["data"]
        assert len(create_data["data"]["insert"]) == 1
        assert create_data["data"]["insert"][0]["name"] == test_name
        assert create_data["data"]["insert"][0]["competition_id"] == competition_id

        # Get the ID
        event_id = create_data["data"]["insert"][0]["id"]

        # Retrieve all events
        get_response = test_client_with_db.get("/event")
        assert get_response.status_code == 200

        # Check that our created event is in the response
        get_data = get_response.json()
        assert "data" in get_data

        # Find the created event
        found = False
        for event in get_data["data"]:
            if event["id"] == event_id and event["name"] == test_name:
                found = True
                break

        assert found, "Created event not found in GET response"


class TestScoreSheetEndpoints:
    """Tests for scoresheet API endpoints using test models."""

    def test_create_and_get_scoresheet(self, test_client_with_db):
        """Test creating and retrieving a scoresheet."""
        # Test data
        test_name = f"Test Scoresheet {generate_uuid()}"

        # Create a scoresheet
        create_response = test_client_with_db.post(
            "/scoresheet/many",
            json={
                "insert": [
                    {"name": test_name}
                ]
            }
        )

        # Check status code
        assert create_response.status_code == 201, f"Failed to create scoresheet: {create_response.text}"

        # Check response data
        create_data = create_response.json()
        assert "data" in create_data
        assert "insert" in create_data["data"]
        assert len(create_data["data"]["insert"]) == 1
        assert create_data["data"]["insert"][0]["name"] == test_name

        # Get the ID
        scoresheet_id = create_data["data"]["insert"][0]["id"]

        # Retrieve all scoresheets
        get_response = test_client_with_db.get("/scoresheet")
        assert get_response.status_code == 200

        # Check that our created scoresheet is in the response
        get_data = get_response.json()
        assert "data" in get_data

        # Find the created scoresheet
        found = False
        for sheet in get_data["data"]:
            if sheet["id"] == scoresheet_id and sheet["name"] == test_name:
                found = True
                break

        assert found, "Created scoresheet not found in GET response"


class TestPhaseEndpoints:
    """Tests for phase API endpoints using test models."""

    @pytest.fixture
    def competition(self, test_client_with_db):
        """Create a competition for testing."""
        response = test_client_with_db.post(
            "/competition/many",
            json={
                "insert": [
                    {"name": f"Test Competition for Phases {generate_uuid()}"}
                ]
            }
        )
        return response.json()["data"]["insert"][0]

    @pytest.fixture
    def event(self, test_client_with_db, competition):
        """Create an event for testing."""
        response = test_client_with_db.post(
            "/event/many",
            json={
                "insert": [
                    {
                        "name": f"Test Event for Phases {generate_uuid()}",
                        "competition_id": competition["id"]
                    }
                ]
            }
        )
        return response.json()["data"]["insert"][0]

    @pytest.fixture
    def scoresheet(self, test_client_with_db):
        """Create a scoresheet for testing."""
        response = test_client_with_db.post(
            "/scoresheet/many",
            json={
                "insert": [
                    {"name": f"Test Scoresheet {generate_uuid()}"}
                ]
            }
        )
        return response.json()["data"]["insert"][0]

    def test_create_and_get_phase(self, test_client_with_db, event, scoresheet):
        """Test creating and retrieving a phase."""
        # Test data
        test_name = f"Test Phase {generate_uuid()}"
        event_id = event["id"]
        scoresheet_id = scoresheet["id"]

        # Create a phase
        create_response = test_client_with_db.post(
            "/phase/many",
            json={
                "insert": [
                    {
                        "name": test_name,
                        "event_id": event_id,
                        "number_of_runs": 3,
                        "number_of_runs_for_score": 2,
                        "number_of_judges": 3,
                        "scoresheet": scoresheet_id
                    }
                ]
            }
        )

        # Check status code
        assert create_response.status_code == 201, f"Failed to create phase: {create_response.text}"

        # Check response data
        create_data = create_response.json()
        assert "data" in create_data
        assert "insert" in create_data["data"]
        assert len(create_data["data"]["insert"]) == 1
        assert create_data["data"]["insert"][0]["name"] == test_name
        assert create_data["data"]["insert"][0]["event_id"] == event_id

        # Get the ID
        phase_id = create_data["data"]["insert"][0]["id"]

        # Retrieve the specific phase
        get_response = test_client_with_db.get(f"/phase/{phase_id}")
        assert get_response.status_code == 200, f"Failed to get phase: {get_response.text}"

        # Check response data
        get_data = get_response.json()
        assert "data" in get_data
        assert get_data["data"]["id"] == phase_id
        assert get_data["data"]["name"] == test_name
        assert get_data["data"]["event_id"] == event_id


class TestHeatEndpoints:
    """Tests for heat API endpoints using test models."""

    @pytest.fixture
    def competition(self, test_client_with_db):
        """Create a competition for testing."""
        response = test_client_with_db.post(
            "/competition/many",
            json={
                "insert": [
                    {"name": f"Test Competition for Heats {generate_uuid()}"}
                ]
            }
        )
        return response.json()["data"]["insert"][0]

    def test_create_and_get_heat(self, test_client_with_db, competition):
        """Test creating and retrieving a heat."""
        # Test data
        test_name = f"Test Heat {generate_uuid()}"
        competition_id = competition["id"]

        # Create a heat
        create_response = test_client_with_db.post(
            "/heat/many",
            json={
                "insert": [
                    {
                        "name": test_name,
                        "competition_id": competition_id
                    }
                ]
            }
        )

        # Check status code
        assert create_response.status_code == 201, f"Failed to create heat: {create_response.text}"

        # Check response data
        create_data = create_response.json()
        assert "data" in create_data
        assert "insert" in create_data["data"]
        assert len(create_data["data"]["insert"]) == 1
        assert create_data["data"]["insert"][0]["name"] == test_name
        assert create_data["data"]["insert"][0]["competition_id"] == competition_id

        # Get the ID
        heat_id = create_data["data"]["insert"][0]["id"]

        # Retrieve the specific heat
        get_response = test_client_with_db.get(f"/heat/{heat_id}")
        assert get_response.status_code == 200, f"Failed to get heat: {get_response.text}"

        # Check response data
        get_data = get_response.json()
        assert "data" in get_data
        assert get_data["data"]["id"] == heat_id
        assert get_data["data"]["name"] == test_name
        assert get_data["data"]["competition_id"] == competition_id


class TestAthleteEndpoints:
    """Tests for athlete API endpoints using test models."""

    def test_create_and_update_athlete(self, test_client_with_db):
        """Test creating and updating an athlete."""
        # Test data
        first_name = f"John {generate_uuid()}"
        last_name = f"Doe {generate_uuid()}"
        bib = f"A{generate_uuid()[:6]}"

        # Create an athlete
        create_response = test_client_with_db.post(
            "/athlete/many",
            json={
                "insert": [
                    {
                        "first_name": first_name,
                        "last_name": last_name,
                        "bib": bib,
                        "affiliation": "Test Team"
                    }
                ]
            }
        )

        # Check status code
        assert create_response.status_code == 201, f"Failed to create athlete: {create_response.text}"

        # Check response data
        create_data = create_response.json()
        assert "data" in create_data
        assert "insert" in create_data["data"]
        assert len(create_data["data"]["insert"]) == 1
        assert create_data["data"]["insert"][0]["first_name"] == first_name
        assert create_data["data"]["insert"][0]["last_name"] == last_name
        assert create_data["data"]["insert"][0]["bib"] == bib

        # Get the ID
        athlete_id = create_data["data"]["insert"][0]["id"]

        # Update the athlete
        updated_first_name = f"Jane {generate_uuid()}"
        update_response = test_client_with_db.patch(
            f"/athlete/{athlete_id}",
            json={"first_name": updated_first_name}
        )

        # Check status code
        assert update_response.status_code == 200, f"Failed to update athlete: {update_response.text}"

        # Retrieve the specific athlete to check update
        get_response = test_client_with_db.get(f"/athlete/{athlete_id}")
        assert get_response.status_code == 200, f"Failed to get athlete: {get_response.text}"

        # Check response data
        get_data = get_response.json()
        assert "data" in get_data
        assert get_data["data"]["id"] == athlete_id
        # Check update took effect
        assert get_data["data"]["first_name"] == updated_first_name
        assert get_data["data"]["last_name"] == last_name
