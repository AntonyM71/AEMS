"""Simplified test for autogenerated endpoint."""
import uuid
from unittest.mock import patch

import pytest
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from main import app

# Create test client
client = TestClient(app)

# Mock the get_transaction_session dependency


@pytest.fixture
def mock_session():
    """Create a mock session."""
    # Create in-memory SQLite database
    engine = create_engine("sqlite:///:memory:")

    # Create a simplified competition table
    engine.execute("""
    CREATE TABLE competition (
        id VARCHAR(36) PRIMARY KEY,
        name VARCHAR NOT NULL
    )
    """)

    # Insert a test competition
    test_id = str(uuid.uuid4())
    test_name = "Test Competition"
    engine.execute(
        f"INSERT INTO competition (id, name) VALUES ('{test_id}', '{test_name}')"
    )

    # Create session
    SessionLocal = sessionmaker(bind=engine)
    db = SessionLocal()

    # Define a patched version of the dependency
    def get_patched_db():
        try:
            yield db
        finally:
            pass

    # Use patch to override the dependency
    with patch("db.client.get_transaction_session", return_value=get_patched_db()):
        yield test_id

    # Clean up
    db.close()


# Test GET /competition endpoint
def test_get_competitions(mock_session):
    """Test getting all competitions."""
    # Get the test competition ID from the mock session
    test_id = mock_session

    # Make the GET request
    response = client.get("/competition")

    # Print debugging info
    print(f"Status Code: {response.status_code}")
    print(
        f"Response: {response.json() if response.status_code == 200 else response.text}")

    # Check the response
    assert response.status_code == 200
    data = response.json()
    assert "data" in data

    # Check that our test competition is in the response
    found = False
    for comp in data["data"]:
        if comp["id"] == test_id:
            found = True
            break

    assert found, f"Test competition with ID {test_id} not found in response"
