"""Change Run data type

Revision ID: 014230cae1d9
Revises: 
Create Date: 2023-12-17 13:41:41.818024

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "014230cae1d9"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "athlete",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("bib", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "competition",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "scoreSheet",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            nullable=False,
            comment="Competition ID",
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "availableMoves",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("sheet_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("fl_score", sa.Integer(), nullable=False),
        sa.Column("rb_score", sa.Integer(), nullable=False),
        sa.Column("direction", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["sheet_id"],
            ["scoreSheet.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "event",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("competition_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["competition_id"],
            ["competition.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "heat",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("competition_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["competition_id"],
            ["competition.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "availableBonuses",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("sheet_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("move_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("score", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["move_id"],
            ["availableMoves.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sheet_id"],
            ["scoreSheet.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "phase",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("event_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("number_of_runs", sa.Integer(), nullable=False),
        sa.Column("number_of_runs_for_score", sa.Integer(), nullable=False),
        sa.Column("scoresheet", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["event.id"],
        ),
        sa.ForeignKeyConstraint(
            ["scoresheet"],
            ["scoreSheet.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "athleteheat",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("heat_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("athlete_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("phase_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["athlete_id"],
            ["athlete.id"],
        ),
        sa.ForeignKeyConstraint(
            ["heat_id"],
            ["heat.id"],
        ),
        sa.ForeignKeyConstraint(
            ["phase_id"],
            ["phase.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "scoredMoves",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("move_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("heat_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("run_number", sa.Integer(), nullable=False),
        sa.Column("phase_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("judge_id", sa.String(), nullable=False),
        sa.Column("athlete_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("direction", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["athlete_id"],
            ["athlete.id"],
        ),
        sa.ForeignKeyConstraint(
            ["heat_id"],
            ["heat.id"],
        ),
        sa.ForeignKeyConstraint(
            ["move_id"],
            ["availableMoves.id"],
        ),
        sa.ForeignKeyConstraint(
            ["phase_id"],
            ["phase.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "scoredBonuses",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("bonus_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("move_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("judge_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["bonus_id"],
            ["availableBonuses.id"],
        ),
        sa.ForeignKeyConstraint(
            ["move_id"],
            ["scoredMoves.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("scoredBonuses")
    op.drop_table("scoredMoves")
    op.drop_table("athleteheat")
    op.drop_table("phase")
    op.drop_table("availableBonuses")
    op.drop_table("heat")
    op.drop_table("event")
    op.drop_table("availableMoves")
    op.drop_table("scoreSheet")
    op.drop_table("competition")
    op.drop_table("athlete")
    # ### end Alembic commands ###
